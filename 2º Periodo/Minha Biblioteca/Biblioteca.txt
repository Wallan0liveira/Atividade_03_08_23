using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace Listas_de_Exercicios
{
    internal class Biblioteca
    {
        public double[] FuncaoVetorOrdenar(double[] numero)
        {
            double aux = 0.00;

            for (int i = 0; i < numero.Length; i++)
            {
                for (int j = 0; j < numero.Length; j++)
                {
                    if (numero[i] < numero[j])
                    {
                        aux = numero[i];
                        numero[i] = numero[j];
                        numero[j] = aux;
                    }
                }
            }
            return numero;
        }

        public double[] FuncaoVetorMultiplo(double[] vetor, double multiplo)
        {
            int contador = 0;
            double[] aux = new double[vetor.Length];
            for (int i = 0; i < vetor.Length; i++)
            {
                if ((vetor[i] % multiplo) == 0)
                {
                    aux[contador] = vetor[i];
                    contador++;
                }
            }

            return aux;
        }
        public double FuncaoVetorAutoSoma(double[] vetor)
        {
            double resposta = 0;
            for (int i = 0; i < vetor.Length; i++)
            {
                resposta += vetor[i];
            }

            return resposta;
        }

        public double[] FuncaoVetoresSoma(double[] vetor1, double[] vetor2)
        {
            double[] resposta;
            int tamanho = vetor1.Length, aux = vetor1.Length;
            if (vetor1.Length < vetor2.Length)
            {
                tamanho = vetor1.Length;
                aux = vetor2.Length;
            }

            if (vetor1.Length > vetor2.Length)
            {
                tamanho = vetor2.Length;
                aux = vetor1.Length;
            }
            resposta = new double[aux];

            for (int i = 0; i < tamanho; i++)
            {
                resposta[i] = vetor1[i] + vetor2[i];
            }

            return resposta;
        }

        public double[,] FuncaoMatrizOrdenar(double[,] matriz)
        {
            //passa os valores da matriz para um vetor
            double[] vetor = new double[matriz.Length];
            int contador = 0;
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    vetor[contador] = matriz[i, j];
                    contador++;
                }
            }

            //Ordena o vetor
            double[] aux = new double[vetor.Length];
            for (int i = 0; i < vetor.Length; i++)
            {
                for (int j = 0; j < vetor.Length; j++)
                {
                    if (vetor[i] < vetor[j])
                    {
                        aux[i] = vetor[i];
                        vetor[i] = vetor[j];
                        vetor[j] = aux[i];
                    }
                }
            }

            //passa os valores do vetor para matriz
            contador = 0;
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    matriz[i, j] = vetor[contador];
                    contador++;
                }
            }

            return matriz;
        }

        public double[,] FuncaoMatrizMultiplo(double[,] matriz, double multiplo)
        {
            double[,] aux = new double[matriz.GetLength(0), matriz.GetLength(1)];
            for (int i = 0; i < matriz.GetLength(0); i++)
            {
                for (int j = 0; j < matriz.GetLength(1); j++)
                {
                    if ((matriz[i, j] % multiplo) == 0)
                    {
                        aux[i, j] = matriz[i, j];
                    }
                }
            }

            return aux;
        }

        public double FuncaoMediaVetor(double[] vetor)
        {
            return FuncaoVetorAutoSoma(vetor) / vetor.GetLength(0);
        }

        public double[,] FuncaoMatrizImparPar(double[,] matriz, int tipo)//tipo 1 é par e 2 é impar
        {
            double[,] aux = new double[matriz.GetLength(0), matriz.GetLength(1)];

            //par
            if (tipo == 1)
            {
                for (int i = 0; i < matriz.GetLength(0); i++)
                {
                    for (int j = 0; j < matriz.GetLength(1); j++)
                    {
                        if ((matriz[i, j] % 2) == 0)
                        {
                            aux[i, j] = matriz[i, j];
                        }
                    }
                }
            }

            //impar
            if (tipo == 2)
            {
                for (int i = 0; i < matriz.GetLength(0); i++)
                {
                    for (int j = 0; j < matriz.GetLength(1); j++)
                    {
                        if ((matriz[i, j] % 2) != 0)
                        {
                            aux[i, j] = matriz[i, j];
                        }
                    }
                }
            }



            return aux;
        }
    }
}